#pragma once

#include <Forms/TESForm.h>
#include <Components/TESFullName.h>

struct ActorValueInfo : TESForm
{
    enum
    {
        kAbsorbChance = 0,
        kActionPoints = 1,
        kAggression = 2,
        kAgility = 3,
        kAimStability = 4,
        kAlchemy = 5,
        kAnimationMult = 6,
        kArmorPerks = 7,
        kAssistance = 8,
        kAttackDamageMult = 9,
        kBlindness = 10,
        kBlock = 11,
        kBloodyMess = 12,
        kBowSpeedBonus = 13,
        kBowStaggerBonus = 14,
        kBrainCondition = 15,
        kCarryWeight = 16,
        kCharisma = 17,
        kCombatHealthRegenMult = 18,
        kConfidence = 19,
        kCritChance = 20,
        kDamageResist = 21,
        kDeafness = 22,
        kEndurance = 24,
        kEnduranceCondition = 25,
        kExperience = 26,
        kHealth = 27,
        kHealRateMult = 28,
        kIdleChatterTimeMin = 29,
        kIdleChatterTimeMax = 30,
        kIgnoreCrippledLimbs = 31,
        kIntelligence = 32,
        kInvisibility = 33,
        kKARMA = 34,
        kLeftAttackCondition = 35,
        kLeftItemCharge = 36,
        kLeftMobilityCondition = 37,
        kLeftWeaponSpeedMult = 38,
        kLockpicking = 39,
        kLuck = 40,
        kMass = 41,
        kMeleeDamage = 42,
        kMorality = 43,
        kMovementNoiseMult = 44,
        kNightEye = 45,
        kPerception = 46,
        kPerceptionCondition = 47,
        kPoisonResist = 49,
        kPowerArmorBattery = 50,
        kPowerArmorHeadCondition = 51,
        kPowerArmorTorsoCondition = 52,
        kPowerArmorLeftArmCondition = 53,
        kPowerArmorRightArmCondition = 54,
        kPowerArmorLeftLegCondition = 55,
        kPowerArmorRightLegCondition = 56,
        kRadHealthMax = 57,
        kRads = 58,
        kFatigueAPMax = 59,
        kFatigue = 60,
        kReflectDamage = 61,
        kConditionRate = 62,
        kRightAttackCondition = 63,
        kRightItemCharge = 64,
        kRightMobilityCondition = 65,
        kRotationSpeedCondition = 66,
        kShieldPerks = 67,
        kShoutRecoveryMult = 68,
        kSneak = 69,
        kSpeedMult = 71,
        kUnusedStamina = 72,
        kStrength = 73,
        kSuspicious = 74,
        kTelekinesis = 75,
        kUnarmedDamage = 76,
        kVANSPerk = 77,
        kWardPower = 78,
        kWaitingForPlayer = 79,
        kWaterBreathing = 80,
        kWaterWalking = 81,
        kWeaponSpeedMult = 82,
        kWeapReloadSpeedMult = 83,
        kHealRate = 84,
        kActionPointsRate = 85,
        kActionPointsRateMult = 86,
        kRadsRate = 87,
        kRadsRateMult = 88,
        kFatigueRate = 89,
        kFatigueRateMult = 90,
        kConditionRateMult = 91,
        kFireResist = 92,
        kElectricResist = 93,
        kFrostResist = 94,
        kMagicResist = 95,
        kRadResistIngestion = 96,
        kRadResistExposure = 97,
        kEnergy = 98,
        kEnergyResist = 99,
        kParalysis = 100,
        kAttackConditionAlt1 = 101,
        kAttackConditionAlt2 = 102,
        kAttackConditionAlt3 = 103,
        kPowerGenerated = 104,
        kPowerRadiation = 105,
        kPowerRequired = 106,
        kFood = 107,
        kWater = 108,
        kSafety = 109,
        kBed = 110,
        kHappiness = 111,
        kArtillery = 112,
        kWorkshopItemOverlap = 113,
        kWorkshopItemClampDirection = 114,
        kWorkshopItemZOffset = 115,
        kWorkshopPlayerOwned = 116,
        kWorkshopActorWounded = 117,
        kWorkshopStackableItem = 118,
        kWorkshopSnapPointRadius = 119,
        kWorkshopAnythingIsGround = 120,
        kWorkshopMaxTriangles = 121,
        kWorkshopMaxDraws = 122,
        kWorkshopCurrentTriangles = 123,
        kWorkshopCurrentDraws = 124,
        kWorkshopIgnoreSimpleIntersections = 125,
        kWorkshopAllowUnsupportedStacking = 126,
        kWorkshopSnapTransmitsPower = 127,
        kWorkshopPowerConnection = 128,
        kLogicOperation = 129,
        kLogicOutput = 130,
        kIgnorePlayerWhileFrenzied = 131,
        kActorValueCount = 132,
    };

    static ActorValueInfo* Resolve(uint32_t aId) noexcept;

    virtual ~ActorValueInfo();

    TESFullName name;
    uint8_t pad30[0x68 - 0x30];
    char* key;
};

static_assert(offsetof(ActorValueInfo, name) == 0x20);
static_assert(offsetof(ActorValueInfo, key) == 0x68);
